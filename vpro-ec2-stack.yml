---
- name: Setup Vprofile stack
  hosts: localhost
  connection: local
  gather_facts: False
  tasks:
    - name: Import VPC Variables
      include_vars:
        file: vars/vprostacksetup.txt

    - name: Import VPC setup Variables
      include_vars:
        file: vars/vpc-outputs_vars

    - name: Create vprofile ec2 key
      ec2_key:
        name: vprokey
        region: "{{ region }}"
      register: vprokey_out

    - name: Save Private key into file loginkey_vpro.pem
      copy:
        content: "{{ vprokey_out.key.private_key }}"
        dest: ./loginkey_vpro.pem
        mode: '0600'
      when: vprokey_out.changed

    - name: Create security group for load balancer
      ec2_group:
        name: vproELB-sg
        description: Allow port 80 from everywhere and all port within SG
        vpc_id: "{{ vpc_id }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: vproELBSG_out

    - name: Create security group for Vprofile stack
      ec2_group:
        name: vproStack-sg
        description: Allow port 22 from everywhere and all port within SG
        vpc_id: "{{ vpc_id }}"
        region: "{{ region }}"
        purge_rules: no
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{ vproELBSG_out.group_id }}"
          
          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{ BastionSGid }}"
      register: vproStackSG_out

    - name: update security group with its own security group id
      ec2_group:
        name: vproStack-sg
        description: Allow port 22 from everywhere and all port within SG
        vpc_id: "{{ vpc_id }}"
        region: "{{ region }}"
        purge_rules: no
        rules:
          - proto: all
            group_id: "{{ vproStackSG_out.group_id }}"

    - name: Creating Nginx web01
      amazon.aws.ec2_instance:
        name: "web01"
        key_name: vprokey
        instance_type: t2.micro
        image_id: "{{ nginx_ami }}"
        wait: yes
        wait_timeout: 300
        security_groups: ["{{ vproStackSG_out.group_id }}"]
        vpc_subnet_id: "{{ privsub1_id }}"
        network:
          assign_public_ip: yes
        exact_count: 1
        filters:
          "tag:Name": "web01"
          "tag:Project": "Vprofile"
          "tag:Owner": "DevOps Team"
        region: "{{ region }}"
        tags:
          Name: web01
          Project: Vprofile
          Owner: DevOps Team
      register: web01_out

    - name: Creating tomcat app01
      amazon.aws.ec2_instance:
        name: "app01"
        key_name: vprokey
        instance_type: t2.micro
        image_id: "{{ tomcat_ami }}"
        wait: yes
        wait_timeout: 300
        security_groups: ["{{ vproStackSG_out.group_id }}"]
        vpc_subnet_id: "{{ privsub1_id }}"
        network:
          assign_public_ip: yes
        exact_count: 1
        filters:
          "tag:Name": "app01"
          "tag:Project": "Vprofile"
          "tag:Owner": "DevOps Team"
        region: "{{ region }}"
        tags:
          Name: app01
          Project: Vprofile
          Owner: DevOps Team
      register: app01_out

    - name: Creating memcache mc01
      amazon.aws.ec2_instance:
        name: "mc01"
        key_name: vprokey
        instance_type: t2.micro
        image_id: "{{ memcache_ami }}"
        wait: yes
        wait_timeout: 300
        security_groups: ["{{ vproStackSG_out.group_id }}"]
        vpc_subnet_id: "{{ privsub1_id }}"
        network:
          assign_public_ip: yes
        exact_count: 1
        filters:
          "tag:Name": "mc01"
          "tag:Project": "Vprofile"
          "tag:Owner": "DevOps Team"
        region: "{{ region }}"
        tags:
          Name: mc01
          Project: Vprofile
          Owner: DevOps Team
      register: mc01_out

    - name: Creating RabbitMQ rmq01
      amazon.aws.ec2_instance:
        name: "rmq01"
        key_name: vprokey
        instance_type: t2.micro
        image_id: "{{ rmq_ami }}"
        wait: yes
        wait_timeout: 300
        security_groups: ["{{ vproStackSG_out.group_id }}"]
        vpc_subnet_id: "{{ privsub1_id }}"
        network:
          assign_public_ip: yes
        exact_count: 1
        filters:
          "tag:Name": "rmq01"
          "tag:Project": "Vprofile"
          "tag:Owner": "DevOps Team"
        region: "{{ region }}"
        tags:
          Name: rmq01
          Project: Vprofile
          Owner: DevOps Team
      register: rmq01_out

    - name: Creating Mysql db01
      amazon.aws.ec2_instance:
        name: "db01"
        key_name: vprokey
        instance_type: t2.micro
        image_id: "{{ mysql_ami }}"
        wait: yes
        wait_timeout: 300
        security_groups: ["{{ vproStackSG_out.group_id }}"]
        vpc_subnet_id: "{{ privsub1_id }}"
        network:
          assign_public_ip: yes
        exact_count: 1
        filters:
          "tag:Name": "db01"
          "tag:Project": "Vprofile"
          "tag:Owner": "DevOps Team"
        region: "{{ region }}"
        tags:
          Name: db01
          Project: Vprofile
          Owner: DevOps Team
      register: db01_out

    - debug:
        var: db01_out.instances[0].instance_id

    - name: Create Classic Load Balancer
      amazon.aws.elb_classic_lb:
        name: "vprofile-elb"
        state: present
        region: "{{ region }}"
        purge_instance_ids: yes
        security_group_names:
          - vproELB-sg
        subnets:
          - "{{ pubsub1_id }}"
          - "{{ pubsub2_id }}"
          - "{{ pubsub3_id }}"
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_protocol: http
            instance_port: 80
        instances_ids:
        - "{{ web01_out.instances[0].instance_id }}"
      register: elb_out

    - name: Insert/Update Hosts private IP & Name in file provision-stack/group-vars/hostsip
      blockinfile:
        path: provision-stack/group_vars/hostsip
        block: |
          ---
          web01_ip: "{{ web01_out.instances[0].private_ip }}"
          app01_ip: "{{ app01_out.instances[0].private_ip }}"
          mc01_ip: "{{ mc01_out.instances[0].private_ip }}"
          rmq01_ip: "{{ rmq01_out.instances[0].private_ip }}"
          db01_ip: "{{ db01_out.instances[0].private_ip }}"
      
    - name: Copy login Key to Provision_stack directory
      copy:
        src: ./loginkey_vpro.pem
        dest: ./provision-stack/loginkey_vpro.pem
        mode: '0400'

    - name: Insert/update Inventory file provision-stack/inventory-vpro
      blockinfile:
        path: provision-stack/inventory-vpro
        block: |
          web01 ansible_host={{ web01_out.instances[0].private_ip }} 
          app01 ansible_host={{ app01_out.instances[0].private_ip }}
          mc01 ansible_host={{ mc01_out.instances[0].private_ip }} 
          rmq01 ansible_host={{ rmq01_out.instances[0].private_ip }}
          db01 ansible_host={{ db01_out.instances[0].private_ip }}
          cntl ansible_host=127.0.0.1 ansible_connection=local

          [websrvgrp]
          web01

          [appsrvgrp]
          app01

          [mcsrvgrp]
          mc01

          [rmqsrvgrp]
          rmq01

          [dbsrvgrp]
          db01

          [control]
          cntl

          [stack_inst:children]
          websrvgrp
          appsrvgrp
          mcsrvgrp
          rmqsrvgrp
          dbsrvgrp

          [stack_inst:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=./loginkey_vpro.pem
          #ansible_python_interpreter=/usr/bin/python3

