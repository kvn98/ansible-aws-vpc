---
- name: Setup Vprofile stack
  hosts: localhost
  connection: local
  gather_facts: False
  tasks:
    - name: Import VPC Variables
      include_vars:
        file: vars/vprostacksetup.txt

    - name: Import VPC setup Variables
      include_vars:
        file: vars/vpc-outputs_vars

    - name: Create vprofile ec2 key
      ec2_key:
        name: vprokey
        region: "{{ region }}"
      register: vprokey_out

    - name: Save Private key into file loginkey_vpro.pem
      copy:
        content: "{{ vprokey_out.key.private_key }}"
        dest: ./loginkey_vpro.pem
        mode: '0600'
      when: vprokey_out.changed

    - name: Create security group for load balancer
      ec2_group:
        name: vproELB-sg
        description: Allow port 80 from everywhere and all port within SG
        vpc_id: "{{ vpc_id }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: vproELBSG_out

    - name: Create security group for Vprofile stack
      ec2_group:
        name: vproStack-sg
        description: Allow port 22 from everywhere and all port within SG
        vpc_id: "{{ vpc_id }}"
        region: "{{ region }}"
        purge_rules: no
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{ vproELBSG_out.group_id }}"
          
          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{ BastionSGid }}"
      register: vproStackSG_out

    - name: update security group with its own security group id
      ec2_group:
        name: vproStack-sg
        description: Allow port 22 from everywhere and all port within SG
        vpc_id: "{{ vpc_id }}"
        region: "{{ region }}"
        purge_rules: no
        rules:
          - proto: all
            group_id: "{{ vproStackSG_out.group_id }}"

    - name: Creating Nginx web01
      amazon.aws.ec2_instance:
        name: "web01"
        key_name: vprokey
        instance_type: t2.micro
        image_id: "{{ nginx_ami }}"
        wait: yes
        wait_timeout: 300
        security_groups: ["{{ vproStackSG_out.group_id }}"]
        vpc_subnet_id: "{{ privsub1_id }}"
        network:
          assign_public_ip: yes
        exact_count: 1
        filters:
          "tag:Name": "web01"
          "tag:Project": "Vprofile"
          "tag:Owner": "DevOps Team"
        region: "{{ region }}"
        tags:
          Name: web01
          Project: Vprofile
          Owner: DevOps Team
      register: web01_out

    - name: Creating tomcat app01
      amazon.aws.ec2_instance:
        name: "app01"
        key_name: vprokey
        instance_type: t2.micro
        image_id: "{{ tomcat_ami }}"
        wait: yes
        wait_timeout: 300
        security_groups: ["{{ vproStackSG_out.group_id }}"]
        vpc_subnet_id: "{{ privsub1_id }}"
        network:
          assign_public_ip: yes
        exact_count: 1
        filters:
          "tag:Name": "app01"
          "tag:Project": "Vprofile"
          "tag:Owner": "DevOps Team"
        region: "{{ region }}"
        tags:
          Name: app01
          Project: Vprofile
          Owner: DevOps Team
      register: app01_out

    - name: Creating memcache mc01
      amazon.aws.ec2_instance:
        name: "mc01"
        key_name: vprokey
        instance_type: t2.micro
        image_id: "{{ memcache_ami }}"
        wait: yes
        wait_timeout: 300
        security_groups: ["{{ vproStackSG_out.group_id }}"]
        vpc_subnet_id: "{{ privsub1_id }}"
        network:
          assign_public_ip: yes
        exact_count: 1
        filters:
          "tag:Name": "mc01"
          "tag:Project": "Vprofile"
          "tag:Owner": "DevOps Team"
        region: "{{ region }}"
        tags:
          Name: mc01
          Project: Vprofile
          Owner: DevOps Team
      register: mc01_out

    - name: Creating RabbitMQ rmq01
      amazon.aws.ec2_instance:
        name: "rmq01"
        key_name: vprokey
        instance_type: t2.micro
        image_id: "{{ rabbitmq_ami }}"
        wait: yes
        wait_timeout: 300
        security_groups: ["{{ vproStackSG_out.group_id }}"]
        vpc_subnet_id: "{{ privsub1_id }}"
        network:
          assign_public_ip: yes
        exact_count: 1
        filters:
          "tag:Name": "rmq01"
          "tag:Project": "Vprofile"
          "tag:Owner": "DevOps Team"
        region: "{{ region }}"
        tags:
          Name: rmq01
          Project: Vprofile
          Owner: DevOps Team
      register: rmq01_out

    - name: Creating Mysql db01
      amazon.aws.ec2_instance:
        name: "db01"
        key_name: vprokey
        instance_type: t2.micro
        image_id: "{{ mysql_ami }}"
        wait: yes
        wait_timeout: 300
        security_groups: ["{{ vproStackSG_out.group_id }}"]
        vpc_subnet_id: "{{ privsub1_id }}"
        network:
          assign_public_ip: yes
        exact_count: 1
        filters:
          "tag:Name": "db01"
          "tag:Project": "Vprofile"
          "tag:Owner": "DevOps Team"
        region: "{{ region }}"
        tags:
          Name: db01
          Project: Vprofile
          Owner: DevOps Team
      register: db01_out

    - debug:
        var: db01_out
